class MyCircularDeque {
private:
    int s, e, n;
    int* arr;
    
public:
    /** Initialize your data structure here. Set the size of the deque to be k. */
    MyCircularDeque(int k) {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr);
        
        s = 0;
        e = 0;
        n = k + 1;
        arr = new int[n];
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    bool insertFront(int value) {
        if (isFull() == true) {
            return false;
        }
        else {
            s = (s - 1 + n) % n;
            arr[s] = value;
            return true;
        }
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    bool insertLast(int value) {
        if (isFull() == true) {
            return false;
        }
        else {
            arr[e] = value;
            e = (e + 1) % n;
            return true;
        }
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    bool deleteFront() {
        if (isEmpty() == true) {
            return false;
        }
        else {
            s = (s + 1) % n;
            return true;
        }
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    bool deleteLast() {
        if (isEmpty() == true) {
            return false;
        }
        else {
            e = (e - 1 + n) % n;
            return true;
        }
    }
    
    /** Get the front item from the deque. */
    int getFront() {
        return isEmpty() ? -1 : arr[s];
    }
    
    /** Get the last item from the deque. */
    int getRear() {
        return isEmpty() ? -1 : arr[(e - 1 + n) % n];
    }
    
    /** Checks whether the circular deque is empty or not. */
    bool isEmpty() {
        return s == e;
    }
    
    /** Checks whether the circular deque is full or not. */
    bool isFull() {
        return (s - e + n) % n == 1; 
    }
};
